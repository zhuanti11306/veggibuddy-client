class e{static registeredSamplers=new Map;static defaultDescriptor={addressModeU:"repeat",addressModeV:"repeat",addressModeW:"repeat",magFilter:"linear",minFilter:"linear",mipmapFilter:"linear",lodMinClamp:0,lodMaxClamp:1e3,compare:void 0,maxAnisotropy:1};static registerSampler(r,t){if(e.registeredSamplers.has(r))throw new Error(`Sampler with name ${r} is already registered.`);e.registeredSamplers.set(r,t)}static createRegisteredSampler(r,t){if(e.registeredSamplers.has(r))throw new Error(`Sampler with name ${r} is already registered.`);e.registeredSamplers.set(r,new e(r,t))}static getSampler(r){const t=e.registeredSamplers.get(r);if(!t)throw new Error(`Sampler with name ${r} is not registered.`);return t}label;descriptor;gpuSampler=null;constructor(e,r){this.label=e,this.descriptor=r}getGPUSampler(r){return this.gpuSampler?this.gpuSampler:this.gpuSampler=r.createSampler({label:this.label,...e.defaultDescriptor,...this.descriptor})}}var r=(e=>(e.Nearest="nearest",e.Linear="linear",e))(r||{});const t={nearest:{magFilter:"nearest",minFilter:"nearest"},linear:{magFilter:"linear",minFilter:"linear"}};for(const[s,i]of Object.entries(t))e.createRegisteredSampler(s,i);function a(r){return e.getSampler(r)}export{r as S,a as g};
