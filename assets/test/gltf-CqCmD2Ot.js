import"../modulepreload-polyfill-Dqv5PPZA.js";class e{static async fromURL(t){const r=await fetch(t);if(!r.ok)throw new Error(`Failed to fetch GLB file from ${t}: ${r.statusText}`);const n=await r.arrayBuffer();return e.fromArrayBuffer(n)}static fromArrayBuffer(e){let t=null,r=[];if(e.byteLength<12)throw new Error("Invalid GLB file: Data too short for header");const n=new DataView(e,0,12),o=n.getUint32(0,!0),i=n.getUint32(4,!0),a=n.getUint32(8,!0);if(console.log(e),1179937895!==o)throw new Error("Invalid GLB format: Invalid magic number");if(2!==i)throw new Error(`Unsupported GLB version: ${i}`);if(a!==e.byteLength)throw new Error(`GLB length mismatch: expected ${a}, got ${e.byteLength}`);let l=12;for(;l<e.byteLength;){if(l+8>e.byteLength)throw new Error("Invalid GLB file: Incomplete chunk header");const n=new DataView(e,l,8),o=n.getUint32(0,!0),i=n.getUint32(4,!0);if(o<0)throw new Error("Invalid GLB file: Negative chunk length");const a=e.slice(l+8,l+8+o);switch(i){case 1313821514:if(null!==t)throw new Error("GLB file contains multiple JSON chunks");t=JSON.parse((new TextDecoder).decode(a));break;case 5130562:r.push(a);break;default:console.warn(`[DBG] Skipping unknown GLB chunk type: ${i}`)}l+=8+o}if(null===t)throw new Error("GLB file must contain a JSON chunk");if(console.log("[DBG] Parsed GLB Model:",{version:i,length:a,jsonChunk:t,binaryChunks:r.map(((e,t)=>({index:t,length:e.byteLength})))}),!t.asset||!t.asset.version)throw new Error("GLB file is missing asset information");return null}}const t=new URL("./test.glb",import.meta.url).href,r=e.fromURL(t);console.log("[DBG] Model:",r);
