import"../modulepreload-polyfill-Dqv5PPZA.js";import{p as e,B as t,S as r,P as n,D as o,d as a,k as i,r as s,f as l,h as u}from"../index-mTG4zFrc.js";import{g as p,S as d}from"../sampler-BElSqnS2.js";const c=e("",{url:"https://webgpufundamentals.org/webgpu/lessons/resources/kiana.png",size:[128,128],flipY:!0}),m=new t("Test Image Layout",{entries:[{key:"texture",category:"texture",visibility:GPUShaderStage.FRAGMENT},{key:"sampler",category:"sampler",type:"filtering",visibility:GPUShaderStage.FRAGMENT}]}),g=m.createBindGroup({sampler:p(d.Nearest),texture:c});setTimeout((()=>{console.log("[DBG] Image Start Load"),c.load()}),1e3);let f=!1;const x=new class{shaderModule=new r("Test Image Shader","\r\n@group(0) @binding(0) var texture: texture_2d<f32>;\r\n@group(0) @binding(1) var texSampler: sampler;\r\n\r\nstruct VertexOutput {\r\n    @builtin(position) position: vec4<f32>,\r\n    @location(0) color: vec4<f32>,\r\n    @location(1) texCoord: vec2<f32>,\r\n};\r\n\r\n@vertex\r\nfn vertex_main(@location(0) position: vec2<f32>) -> VertexOutput {\r\n    var output: VertexOutput;\r\n    output.position = vec4<f32>(position, 0.0, 1.0);\r\n    output.color = (vec4f(position, 0.0, 1.0) + 1) / 2;\r\n    output.texCoord = (position + 1) / 2;\r\n    return output;\r\n}\r\n\r\n@fragment\r\nfn fragment_main(input: VertexOutput) -> @location(0) vec4<f32> {\r\n    // return input.color;\r\n    var color = textureSample(texture, texSampler, input.texCoord) * input.color;\r\n    return color;\r\n}");pipeline=new n("Test Image",{vertex:[o],layout:[m],shader:{vertex:{module:this.shaderModule,entryPoint:"vertex_main"},fragment:{module:this.shaderModule,entryPoint:"fragment_main"}}});render(){c.isLoaded!==f&&(f=c.isLoaded,console.log("[DBG] Image loaded: ",c.isLoaded)),a({pipeline:this.pipeline,buffer:"fullscreen-triangle",bindGroups:[g]})}},v=document.createElement("canvas");document.body.appendChild(v),await i(v),s((()=>{l({label:"test",colorAttachments:["canvas"]}),x.render(),u()}));
