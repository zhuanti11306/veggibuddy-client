import"../modulepreload-polyfill-Dqv5PPZA.js";import{B as t,a as n,M as e,l as r,m as o,v as i,n as s,S as a,P as u,o as l,g as c,d as p,k as f,V as m,r as d,f as h,h as v}from"../index-mTG4zFrc.js";import{L as g,g as x}from"../layout-DvDq0tE0.js";const y=new t("triangle",{entries:[{category:"buffer",type:"uniform",key:"screenUniform",visibility:GPUShaderStage.VERTEX}]}),b=new n("triangle",{transform:e.mat2x2},{transform:r(2)}),M=y.createBindGroup({screenUniform:{buffer:b}}),w={position:o.float32x2,color:o.unorm8x4},V=[{position:i(0,1),color:i(1,1,0,1)},{position:i(-Math.sqrt(3)/2,-.5),color:i(1,0,1,1)},{position:i(Math.sqrt(3)/2,-.5),color:i(0,1,1,1)}];V[0].position.scaleWith(.75),V[1].position.scaleWith(.75),V[2].position.scaleWith(.75);const T=new s("Test Triangle",w,V).getBufferLayout();console.log("[DBG]",T);const B=new class{shaderModule=new a("Test Triangle Shader","\r\n@group(0) @binding(0) var<uniform> resolution: vec2<f32>;\r\n@group(1) @binding(0) var<uniform> transform: mat2x2<f32>;\r\n\r\nstruct VertexInput {\r\n    @location(0) position: vec2<f32>,\r\n    @location(1) color: vec4<f32>,\r\n};\r\n\r\nstruct VertexOutput {\r\n    @builtin(position) position: vec4<f32>,\r\n    @location(0) color: vec4<f32>,\r\n};\r\n\r\n@vertex\r\nfn vertex_main(input: VertexInput) -> VertexOutput {\r\n    var output: VertexOutput;\r\n    var aspect = resolution.x / resolution.y;\r\n    var position = transform * input.position / select(vec2f(aspect, 1.0), vec2f(1.0, 1/aspect), resolution.x < resolution.y);\r\n    output.position = vec4<f32>(position, 0.0, 1.0);\r\n    output.color = input.color;\r\n    return output;\r\n}\r\n\r\n@fragment\r\nfn fragment_main(input: VertexOutput) -> @location(0) vec4<f32> {\r\n    return input.color;\r\n}");pipeline=new u("Test Triangle",{layout:[g.Screen,y],vertex:[w],shader:{vertex:{module:this.shaderModule,entryPoint:"vertex_main"},fragment:{module:this.shaderModule,entryPoint:"fragment_main"}}});rotation=0;update(t){this.rotation=(this.rotation+t/1e3*45)%360;const n=this.rotation*Math.PI/180,e=l(2,2,[Math.cos(n),Math.sin(n),-Math.sin(n),Math.cos(n)]);b.set("transform",e)}render(){const t=c();"test"===t?.label&&p({pipeline:this.pipeline,buffer:T,bindGroups:[null,M]})}},G=document.createElement("canvas");document.body.appendChild(G),await f(G);const S=x(g.Screen),P=new n("screen-resolution",{resolution:m.vec2}),O=S.createBindGroup({resolution:{buffer:P}});d((t=>{P.set("resolution",i(G.width,G.height)),B.update(t),h({label:"test",colorAttachments:["canvas"],defaultBindGroups:[O]}),B.render(),v()}));
